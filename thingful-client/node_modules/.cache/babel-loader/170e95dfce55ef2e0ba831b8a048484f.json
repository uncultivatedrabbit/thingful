{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date within the range?\r\n *\r\n * @description\r\n * Is the given date within the range?\r\n *\r\n * @param {Date|String|Number} date - the date to check\r\n * @param {Date|String|Number} startDate - the start of range\r\n * @param {Date|String|Number} endDate - the end of range\r\n * @returns {Boolean} the date is within the range\r\n * @throws {Error} startDate cannot be after endDate\r\n *\r\n * @example\r\n * // For the date within the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> false\r\n */\n\n\nfunction isWithinRange(dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime();\n  var startTime = parse(dirtyStartDate).getTime();\n  var endTime = parse(dirtyEndDate).getTime();\n\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  return time >= startTime && time <= endTime;\n}\n\nmodule.exports = isWithinRange;","map":null,"metadata":{},"sourceType":"script"}