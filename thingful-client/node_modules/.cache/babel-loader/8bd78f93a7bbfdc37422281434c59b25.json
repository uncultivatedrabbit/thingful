{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date range overlapping with another date range?\r\n *\r\n * @description\r\n * Is the given date range overlapping with another date range?\r\n *\r\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\r\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\r\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\r\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\r\n * @returns {Boolean} whether the date ranges are overlapping\r\n * @throws {Error} startDate of a date range cannot be after its endDate\r\n *\r\n * @example\r\n * // For overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\r\n * )\r\n * //=> false\r\n */\n\n\nfunction areRangesOverlapping(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime();\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime();\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime();\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime();\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;\n}\n\nmodule.exports = areRangesOverlapping;","map":null,"metadata":{},"sourceType":"script"}